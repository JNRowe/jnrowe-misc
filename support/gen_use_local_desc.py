#! /usr/bin/python -tt
# vim: set sw=4 sts=4 et tw=80 fileencoding=utf-8:
#
"""gen_use_local_desc - Generate profiles/use.local.desc from metadata.xml"""
# Copyright (C) 2009 James Rowe;
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

__version__ = "0.1.0"
__date__ = "2009-09-22"
__author__ = "James Rowe <jnrowe@gmail.com>"
__copyright__ = "Copyright (C) 2009 James Rowe"
__license__ = "GNU General Public License Version 3"
__credits__ = ""
__history__ = "See Git repository"

import glob
import os
import re
import sys

from xml.etree import cElementTree as ET
from xml.sax.saxutils import unescape

def main():
    metadata = glob.glob("*-*/*/metadata.xml")
    if not metadata:
        sys.stderr.write("%s must be run from within a repo.\n" % __file__)
        return 1
    desc = []
    for file in metadata:
        cp = os.path.dirname(file)
        doc = ET.parse(file)
        if doc.find("use"):
            for flag in doc.findall("use/flag"):
                text = " ".join(ET.tostring(flag).split() if flag.text else "")
                # Braindead scrubbing of all tag content, the lazy way to format
                # <pkg> elements within USE descriptions
                text = re.sub("<[^>]+>", "", text)
                desc.append((cp, flag.get("name"), unescape(text)))
    with open("profiles/use.local.desc", "w") as file:
        file.write("# THIS FILE IS AUTOGENERATED FROM metadata.xml\n")
        for hunk in sorted(desc):
            file.write("%s:%s - %s\n" % hunk)

if __name__ == '__main__':
    sys.exit(main())

