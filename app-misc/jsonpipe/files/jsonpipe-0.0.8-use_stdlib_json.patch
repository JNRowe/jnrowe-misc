From: James Rowe <jnrowe@gmail.com>
Subject: Use standard library json
Status: LOCAL

.. info::
   Check this file's history, should you still need support for Python 2.6.

diff --git c/setup.py i/setup.py
index 2de6b1e11d2a..c9a3bd72f5d2 100644
--- c/setup.py
+++ i/setup.py
@@ -29,6 +29,6 @@ setup(
     packages=find_packages(where='src'),
     entry_points={'console_scripts': ['jsonpipe = jsonpipe:main',
                                       'jsonunpipe = jsonpipe:main_unpipe']},
-    install_requires=['simplejson>=2.1.3', 'argparse>=1.1', 'calabash==0.0.3'],
+    install_requires=['calabash==0.0.3'],
     test_suite='jsonpipe._get_tests',
 )
diff --git c/src/jsonpipe/__init__.py i/src/jsonpipe/__init__.py
index 9767520c1c88..39ad9c4e4689 100644
--- c/src/jsonpipe/__init__.py
+++ i/src/jsonpipe/__init__.py
@@ -3,7 +3,8 @@
 import sys
 
 import argparse
-import simplejson
+import json
+from collections import OrderedDict
 
 from pipe import jsonpipe, jsonunpipe
 
@@ -64,8 +65,7 @@ def main():
     args = PARSER.parse_args()
 
     # Load JSON from stdin, preserving the order of object keys.
-    json_obj = simplejson.load(sys.stdin,
-                               object_pairs_hook=simplejson.OrderedDict)
+    json_obj = json.load(sys.stdin, object_pairs_hook=OrderedDict)
     for line in jsonpipe(json_obj, pathsep=args.separator):
         print line
 
@@ -73,8 +73,7 @@ def main():
 def main_unpipe():
     args = PARSER.parse_args()
 
-    simplejson.dump(
+    json.dump(
         jsonunpipe(iter(sys.stdin), pathsep=args.separator,
-                   decoder=simplejson.JSONDecoder(
-                       object_pairs_hook=simplejson.OrderedDict)),
+                   decoder=json.JSONDecoder(object_pairs_hook=OrderedDict)),
         sys.stdout)
diff --git c/src/jsonpipe/pipe.py i/src/jsonpipe/pipe.py
index 84d6601f7d14..0ab872b689b1 100644
--- c/src/jsonpipe/pipe.py
+++ i/src/jsonpipe/pipe.py
@@ -1,4 +1,4 @@
-import simplejson
+import json
 
 
 __all__ = ['jsonpipe', 'jsonunpipe']
@@ -101,7 +101,7 @@ def jsonpipe(obj, pathsep='/', path=()):
         return pathsep + pathsep.join(path) + "\t" + string
 
     if is_value(obj):
-        yield output(simplejson.dumps(obj))
+        yield output(json.dumps(obj))
         raise StopIteration # Stop the generator immediately.
     elif isinstance(obj, dict):
         yield output('{}')
@@ -128,7 +128,7 @@ def jsonpipe(obj, pathsep='/', path=()):
 
 
 def jsonunpipe(lines, pathsep='/', discard='',
-               decoder=simplejson._default_decoder):
+               decoder=json._default_decoder):
 
     r"""
     Parse a stream of jsonpipe output back into a JSON object.
diff --git c/src/jsonpipe/sh.py i/src/jsonpipe/sh.py
index 435fb4dbd47a..9a0d39dd16c8 100644
--- c/src/jsonpipe/sh.py
+++ i/src/jsonpipe/sh.py
@@ -1,7 +1,7 @@
 import re
 
 import calabash
-import simplejson
+import json
 
 import jsonpipe as jp
 
@@ -77,7 +77,7 @@ def search_attr(stdin, attr, value, pathsep='/'):
                 calabash.common.sed(r'^(.*)%s%s\t%s' % (
                     re.escape(pathsep),
                     re.escape(attr),
-                    re.escape(simplejson.dumps(value))),
+                    re.escape(json.dumps(value))),
                     r'\1', exclusive=True) |
                 # Replace empty strings with the root pathsep.
                 calabash.common.sed(r'^$', pathsep))
