from collections import defaultdict

from utils import (cmd_output, command, dep, success)


@command
def gen_removals(args):
    """generate remind file for package removals"""
    dep(['support/removal.rem', ], ['profiles/package.mask', ])
    chunks = open("profiles/package.mask").read().split("\n\n")
    removals = defaultdict(list)
    for chunk in filter(lambda s: "\n# X-Removal: " in s, chunks):
        data = chunk[chunk.index("X-Removal"):].split("\n")
        removal_date = data[0][11:]
        removals[removal_date].append(data[1:])

    with open("support/removal.rem", "w") as file:
        file.write("# THIS FILE IS AUTOGENERATED FROM "
                   "profiles/package.mask\n\n")
        for date, items in sorted(removals.items()):
            for pkgs in items:
                for pkg in filter(None, pkgs):
                    file.write("REM %s *1 PRIORITY 2500 "
                               'MSG %%"Removal due for %s%%" %%a\n'
                               % (date, pkg))
    yield success('removal.rem generated!')


@command
def reminders(args):
    """display repository reminders"""
    output = lambda f: "\n".join(cmd_output('remind %s' % f).splitlines()[1:])
    removals = output('support/removal.rem')
    if removals:
        yield 'Removals:'
        yield removals
    stable_candidates = output('support/stabilisation.rem')
    if stable_candidates:
        yield 'Stabilisation:'
        yield stable_candidates
